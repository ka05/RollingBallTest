package com.example.clay.rollingballtest.sensors;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

import com.example.clay.rollingballtest.observer.GamePublisher;
import com.example.clay.rollingballtest.observer.GameSubscriber;

import java.util.ArrayList;
import java.util.List;

/**
 * Responsible for handling sensor events
 * Notifies subscribers when a change has been made
 */
public class SensorHandler implements SensorEventListener, GamePublisher {
    private Context context;

    private SensorManager sensorManager;
    private Sensor accelerometer;
    private Sensor magnetometer;
    private float[] gravity, geomagnetic;
    private float pitch, roll;

    private List<GameSubscriber> subscribers;

    public SensorHandler(Context context) {
        this.context = context;
        this.startSensorListener();
    }

    /**
     * SensorEventListener override
     * Called when one of the sensors being watched changes
     * @param event
     */
    @Override
    public void onSensorChanged(SensorEvent event) {
        // get values generated by the sensors
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) gravity = event.values;
        if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) geomagnetic = event.values;

        // get the orientation
        if (gravity != null && geomagnetic != null) {
            float R[] = new float[9];
            float I[] = new float[9];
            boolean gotRotationMatrix = SensorManager.getRotationMatrix(R, I, gravity, geomagnetic);

            // check for success
            if (gotRotationMatrix) {
                float orientation[] = new float[3];
                SensorManager.getOrientation(R, orientation);
                pitch = orientation[1];
                roll = orientation[2];
                this.notifySubscribers();
            }
        }
    }

    /**
     * Unused SensorEventListener override
     * @param sensor
     * @param accuracy
     */
    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    /**
     * Adds a subscriber to the sensor handler
     *
     * @param subscriber the subsciber
     */
    @Override
    public void addSubscriber(GameSubscriber subscriber) {
        if (subscribers == null) subscribers = new ArrayList<GameSubscriber>();
        if (!subscribers.contains(subscriber)) subscribers.add(subscriber);
    }

    /**
     * Removes a subscriber from the list of subscribers
     *
     * @param subscriber the subscriber to be removed
     */
    @Override
    public void removeSubscriber(GameSubscriber subscriber) {
        if (subscribers == null || !subscribers.contains(subscriber)) return;
        subscribers.remove(subscriber);
    }

    /**
     * Notifies the observers of a change
     */
    @Override
    public void notifySubscribers() {
        if (subscribers == null || subscribers.size() == 0) return;
        for (GameSubscriber subscriber : subscribers) {
            subscriber.stateChanged();
        }
    }

    /**
     * Starts the sensor manager
     * Gets the sensors we are listening to
     * Registers the listener with the manager
     */
    public void startSensorListener() {
        sensorManager = (SensorManager)this.context.getSystemService(Context.SENSOR_SERVICE);
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        magnetometer = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_GAME);
        sensorManager.registerListener(this, magnetometer, SensorManager.SENSOR_DELAY_GAME);
    }

    /**
     * Unregisters this class as a listener
     */
    public void stopSensorListener() {
        sensorManager.unregisterListener(this);
    }

    /**
     * Gets the pitch
     * @return
     */
    public float getPitch() {
        return pitch;
    }

    /**
     * Gets the roll
     * @return
     */
    public float getRoll() {
        return roll;
    }
}
